'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSetOrderForm
    Inherits DataSet
    
    Private tableTranOrderForm As TranOrderFormDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TranOrderForm")) Is Nothing) Then
                Me.Tables.Add(New TranOrderFormDataTable(ds.Tables("TranOrderForm")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TranOrderForm As TranOrderFormDataTable
        Get
            Return Me.tableTranOrderForm
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSetOrderForm = CType(MyBase.Clone,DataSetOrderForm)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("TranOrderForm")) Is Nothing) Then
            Me.Tables.Add(New TranOrderFormDataTable(ds.Tables("TranOrderForm")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableTranOrderForm = CType(Me.Tables("TranOrderForm"),TranOrderFormDataTable)
        If (Not (Me.tableTranOrderForm) Is Nothing) Then
            Me.tableTranOrderForm.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSetOrderForm"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSetOrderForm.xsd"
        Me.Locale = New System.Globalization.CultureInfo("zh-CN")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableTranOrderForm = New TranOrderFormDataTable
        Me.Tables.Add(Me.tableTranOrderForm)
    End Sub
    
    Private Function ShouldSerializeTranOrderForm() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub TranOrderFormRowChangeEventHandler(ByVal sender As Object, ByVal e As TranOrderFormRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TranOrderFormDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCmpltSituation As DataColumn
        
        Private columnCmpltTime As DataColumn
        
        Private columnDestination As DataColumn
        
        Private columnExtraService As DataColumn
        
        Private columnInitialPlace As DataColumn
        
        Private columnNote As DataColumn
        
        Private columnRFIDBarCodeNO As DataColumn
        
        Private columnTotalQuantity As DataColumn
        
        Private columnTranOrderFormNO As DataColumn
        
        Friend Sub New()
            MyBase.New("TranOrderForm")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CmpltSituationColumn As DataColumn
            Get
                Return Me.columnCmpltSituation
            End Get
        End Property
        
        Friend ReadOnly Property CmpltTimeColumn As DataColumn
            Get
                Return Me.columnCmpltTime
            End Get
        End Property
        
        Friend ReadOnly Property DestinationColumn As DataColumn
            Get
                Return Me.columnDestination
            End Get
        End Property
        
        Friend ReadOnly Property ExtraServiceColumn As DataColumn
            Get
                Return Me.columnExtraService
            End Get
        End Property
        
        Friend ReadOnly Property InitialPlaceColumn As DataColumn
            Get
                Return Me.columnInitialPlace
            End Get
        End Property
        
        Friend ReadOnly Property NoteColumn As DataColumn
            Get
                Return Me.columnNote
            End Get
        End Property
        
        Friend ReadOnly Property RFIDBarCodeNOColumn As DataColumn
            Get
                Return Me.columnRFIDBarCodeNO
            End Get
        End Property
        
        Friend ReadOnly Property TotalQuantityColumn As DataColumn
            Get
                Return Me.columnTotalQuantity
            End Get
        End Property
        
        Friend ReadOnly Property TranOrderFormNOColumn As DataColumn
            Get
                Return Me.columnTranOrderFormNO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TranOrderFormRow
            Get
                Return CType(Me.Rows(index),TranOrderFormRow)
            End Get
        End Property
        
        Public Event TranOrderFormRowChanged As TranOrderFormRowChangeEventHandler
        
        Public Event TranOrderFormRowChanging As TranOrderFormRowChangeEventHandler
        
        Public Event TranOrderFormRowDeleted As TranOrderFormRowChangeEventHandler
        
        Public Event TranOrderFormRowDeleting As TranOrderFormRowChangeEventHandler
        
        Public Overloads Sub AddTranOrderFormRow(ByVal row As TranOrderFormRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTranOrderFormRow(ByVal CmpltSituation As String, ByVal CmpltTime As String, ByVal Destination As String, ByVal ExtraService As String, ByVal InitialPlace As String, ByVal Note As String, ByVal RFIDBarCodeNO As String, ByVal TotalQuantity As Short) As TranOrderFormRow
            Dim rowTranOrderFormRow As TranOrderFormRow = CType(Me.NewRow,TranOrderFormRow)
            rowTranOrderFormRow.ItemArray = New Object() {CmpltSituation, CmpltTime, Destination, ExtraService, InitialPlace, Note, RFIDBarCodeNO, TotalQuantity, Nothing}
            Me.Rows.Add(rowTranOrderFormRow)
            Return rowTranOrderFormRow
        End Function
        
        Public Function FindByTranOrderFormNO(ByVal TranOrderFormNO As Integer) As TranOrderFormRow
            Return CType(Me.Rows.Find(New Object() {TranOrderFormNO}),TranOrderFormRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TranOrderFormDataTable = CType(MyBase.Clone,TranOrderFormDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TranOrderFormDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCmpltSituation = Me.Columns("CmpltSituation")
            Me.columnCmpltTime = Me.Columns("CmpltTime")
            Me.columnDestination = Me.Columns("Destination")
            Me.columnExtraService = Me.Columns("ExtraService")
            Me.columnInitialPlace = Me.Columns("InitialPlace")
            Me.columnNote = Me.Columns("Note")
            Me.columnRFIDBarCodeNO = Me.Columns("RFIDBarCodeNO")
            Me.columnTotalQuantity = Me.Columns("TotalQuantity")
            Me.columnTranOrderFormNO = Me.Columns("TranOrderFormNO")
        End Sub
        
        Private Sub InitClass()
            Me.columnCmpltSituation = New DataColumn("CmpltSituation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCmpltSituation)
            Me.columnCmpltTime = New DataColumn("CmpltTime", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCmpltTime)
            Me.columnDestination = New DataColumn("Destination", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDestination)
            Me.columnExtraService = New DataColumn("ExtraService", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExtraService)
            Me.columnInitialPlace = New DataColumn("InitialPlace", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInitialPlace)
            Me.columnNote = New DataColumn("Note", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNote)
            Me.columnRFIDBarCodeNO = New DataColumn("RFIDBarCodeNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRFIDBarCodeNO)
            Me.columnTotalQuantity = New DataColumn("TotalQuantity", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalQuantity)
            Me.columnTranOrderFormNO = New DataColumn("TranOrderFormNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTranOrderFormNO)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnTranOrderFormNO}, true))
            Me.columnTranOrderFormNO.AutoIncrement = true
            Me.columnTranOrderFormNO.AllowDBNull = false
            Me.columnTranOrderFormNO.Unique = true
        End Sub
        
        Public Function NewTranOrderFormRow() As TranOrderFormRow
            Return CType(Me.NewRow,TranOrderFormRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TranOrderFormRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TranOrderFormRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TranOrderFormRowChangedEvent) Is Nothing) Then
                RaiseEvent TranOrderFormRowChanged(Me, New TranOrderFormRowChangeEvent(CType(e.Row,TranOrderFormRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TranOrderFormRowChangingEvent) Is Nothing) Then
                RaiseEvent TranOrderFormRowChanging(Me, New TranOrderFormRowChangeEvent(CType(e.Row,TranOrderFormRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TranOrderFormRowDeletedEvent) Is Nothing) Then
                RaiseEvent TranOrderFormRowDeleted(Me, New TranOrderFormRowChangeEvent(CType(e.Row,TranOrderFormRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TranOrderFormRowDeletingEvent) Is Nothing) Then
                RaiseEvent TranOrderFormRowDeleting(Me, New TranOrderFormRowChangeEvent(CType(e.Row,TranOrderFormRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTranOrderFormRow(ByVal row As TranOrderFormRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TranOrderFormRow
        Inherits DataRow
        
        Private tableTranOrderForm As TranOrderFormDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTranOrderForm = CType(Me.Table,TranOrderFormDataTable)
        End Sub
        
        Public Property CmpltSituation As String
            Get
                Try 
                    Return CType(Me(Me.tableTranOrderForm.CmpltSituationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableTranOrderForm.CmpltSituationColumn) = value
            End Set
        End Property
        
        Public Property CmpltTime As String
            Get
                Try 
                    Return CType(Me(Me.tableTranOrderForm.CmpltTimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableTranOrderForm.CmpltTimeColumn) = value
            End Set
        End Property
        
        Public Property Destination As String
            Get
                Try 
                    Return CType(Me(Me.tableTranOrderForm.DestinationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableTranOrderForm.DestinationColumn) = value
            End Set
        End Property
        
        Public Property ExtraService As String
            Get
                Try 
                    Return CType(Me(Me.tableTranOrderForm.ExtraServiceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableTranOrderForm.ExtraServiceColumn) = value
            End Set
        End Property
        
        Public Property InitialPlace As String
            Get
                Try 
                    Return CType(Me(Me.tableTranOrderForm.InitialPlaceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableTranOrderForm.InitialPlaceColumn) = value
            End Set
        End Property
        
        Public Property Note As String
            Get
                Try 
                    Return CType(Me(Me.tableTranOrderForm.NoteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableTranOrderForm.NoteColumn) = value
            End Set
        End Property
        
        Public Property RFIDBarCodeNO As String
            Get
                Try 
                    Return CType(Me(Me.tableTranOrderForm.RFIDBarCodeNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableTranOrderForm.RFIDBarCodeNOColumn) = value
            End Set
        End Property
        
        Public Property TotalQuantity As Short
            Get
                Try 
                    Return CType(Me(Me.tableTranOrderForm.TotalQuantityColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableTranOrderForm.TotalQuantityColumn) = value
            End Set
        End Property
        
        Public Property TranOrderFormNO As Integer
            Get
                Return CType(Me(Me.tableTranOrderForm.TranOrderFormNOColumn),Integer)
            End Get
            Set
                Me(Me.tableTranOrderForm.TranOrderFormNOColumn) = value
            End Set
        End Property
        
        Public Function IsCmpltSituationNull() As Boolean
            Return Me.IsNull(Me.tableTranOrderForm.CmpltSituationColumn)
        End Function
        
        Public Sub SetCmpltSituationNull()
            Me(Me.tableTranOrderForm.CmpltSituationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCmpltTimeNull() As Boolean
            Return Me.IsNull(Me.tableTranOrderForm.CmpltTimeColumn)
        End Function
        
        Public Sub SetCmpltTimeNull()
            Me(Me.tableTranOrderForm.CmpltTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDestinationNull() As Boolean
            Return Me.IsNull(Me.tableTranOrderForm.DestinationColumn)
        End Function
        
        Public Sub SetDestinationNull()
            Me(Me.tableTranOrderForm.DestinationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExtraServiceNull() As Boolean
            Return Me.IsNull(Me.tableTranOrderForm.ExtraServiceColumn)
        End Function
        
        Public Sub SetExtraServiceNull()
            Me(Me.tableTranOrderForm.ExtraServiceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInitialPlaceNull() As Boolean
            Return Me.IsNull(Me.tableTranOrderForm.InitialPlaceColumn)
        End Function
        
        Public Sub SetInitialPlaceNull()
            Me(Me.tableTranOrderForm.InitialPlaceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoteNull() As Boolean
            Return Me.IsNull(Me.tableTranOrderForm.NoteColumn)
        End Function
        
        Public Sub SetNoteNull()
            Me(Me.tableTranOrderForm.NoteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRFIDBarCodeNONull() As Boolean
            Return Me.IsNull(Me.tableTranOrderForm.RFIDBarCodeNOColumn)
        End Function
        
        Public Sub SetRFIDBarCodeNONull()
            Me(Me.tableTranOrderForm.RFIDBarCodeNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalQuantityNull() As Boolean
            Return Me.IsNull(Me.tableTranOrderForm.TotalQuantityColumn)
        End Function
        
        Public Sub SetTotalQuantityNull()
            Me(Me.tableTranOrderForm.TotalQuantityColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TranOrderFormRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TranOrderFormRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TranOrderFormRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TranOrderFormRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
